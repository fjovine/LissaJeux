//-----------------------------------------------------------------------
// <copyright file="MainWindow.xaml.cs" company="hiLab">
// Copyright (c) Francesco Iovine.
// </copyright>
// <author>Francesco Iovine iovinemeccanica@gmail.com</author>
// <creation>2016.06.11</creation>
//-----------------------------------------------------------------------
namespace Lissajous
{
    using System;
    using System.ComponentModel;
    using System.Threading;
    using System.Windows;

    /// <summary>
    /// Interaction logic for <c>MainWindow.xaml</c>
    /// </summary>
    public partial class MainWindow : Window, IProgressManager
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="MainWindow"/> class.
        /// Entry point of the <c>Lissajous</c> App.
        /// </summary>
        public MainWindow()
        {
            this.InitializeComponent();
            this.StartStopButton.FallibleControls.Add(this.AmplitudeRatio);
            this.StartStopButton.FallibleControls.Add(this.FrequencyRatio);
            this.StartStopButton.FallibleControls.Add(this.Phase);
            this.AmplitudeRatio.AcceptButton = this.StartStopButton;
            this.FrequencyRatio.AcceptButton = this.StartStopButton;
            this.Phase.AcceptButton = this.StartStopButton;
        }

        /// <summary>
        /// Passes the current steps to the progress bar for GUI purposes.
        /// </summary>
        /// <param name="total">Total number of steps to be done.</param>
        /// <param name="current">The current number of steps done.</param>
        /// <returns>>True if the rendering process must be stopped</returns>
        public bool Where(double total, double current)
        {
            this.Dispatcher.Invoke(() =>
            {
                this.ExecutionProgress.Minimum = 0.0;
                this.ExecutionProgress.Maximum = total;
                this.ExecutionProgress.Value = current;
            });
            return this.stopGifRender;
        }

        /// <summary>
        /// Handles the closing event.
        /// </summary>
        /// <param name="e">Arguments of the closing event.</param>
        protected override void OnClosing(CancelEventArgs e)
        {
            base.OnClosing(e);
            this.LissaSet.Stop();
        }

        /// <summary>
        /// Handles the click event on the StopButton
        /// </summary>
        /// <param name="sender">The parameter is not used.</param>
        /// <param name="e">The parameter is not used.</param>
        private void StopButton_Click(object sender, RoutedEventArgs e)
        {
            if (this.LissaSet.IsRunning)
            {
                this.StartStopButton.Content = "Start";
                this.LissaSet.Stop();
                this.StartStopButton.EnableAll = true;
                this.ToAnimatedGif.IsEnabled = true;
            }
            else
            {
                Generator generator = new Generator(
                    (float)this.AmplitudeRatio.Value,
                    (float)this.FrequencyRatio.Value,
                    (float)(this.Phase.Value * Math.PI / 180.0),
                    0.04f);
                this.LissaSet.SetGenerator(generator);
                this.LissaSetCircle.SetGenerator(generator);

                this.LissaSet.Start();
                this.StartStopButton.EnableAll = false;
                this.ToAnimatedGif.IsEnabled = false;
                this.StartStopButton.Content = "Stop";
            }
        }

        /// <summary>
        /// Handles the event generated by the click on the button to start GIF rendering.
        /// </summary>
        /// <param name="sender">The parameter is not used.</param>
        /// <param name="e">The parameter is not used.</param>
        private void ToAnimatedGif_Click(object sender, RoutedEventArgs e)
        {
            if (this.gifRenderer != null)
            {
                // The renderer is running, request stop
                this.stopGifRender = true;
                return;
            }

            this.ExecutionProgress.Visibility = Visibility.Visible;
            var gifParameters = GifParameters.Get();

            if (gifParameters.IsCancel)
            {
                this.ExecutionProgress.Visibility = Visibility.Collapsed;
                return;
            }

            this.ExecutionProgress.Visibility = Visibility.Visible;
            this.ToAnimatedGif.Content = "Stop Gif";

            Generator generator = new Generator(
                (float)this.AmplitudeRatio.Value,
                (float)this.FrequencyRatio.Value,
                (float)(this.Phase.Value * Math.PI / 180.0),
                0.04f);

            gifRenderer = new Thread(() =>
            {
                this.Dispatcher.Invoke(
                    () => {
                        if (this.Sine.IsChecked == true)
                        {
                            LissaSet lissaSet = new LissaSet();
                            lissaSet.SetGenerator(generator);
                            lissaSet.RenderToGif(gifParameters, this);
                        }
                        else
                        {
                            LissaSetCircle lissaSetCircle = new LissaSetCircle();
                            lissaSetCircle.SetGenerator(generator);
                            lissaSetCircle.RenderToGif(gifParameters, this);
                        }

                        this.ExecutionProgress.Visibility = Visibility.Collapsed;
                        this.ToAnimatedGif.Content = "Go Gif";
                        this.stopGifRender = false;
                    });
                this.gifRenderer = null;

            });
            gifRenderer.Start();
        }

        private Thread gifRenderer;
        private bool stopGifRender;

        /// <summary>
        /// Handles the event happening when one of the checkboxes (circle or sinus) are checked.
        /// </summary>
        /// <param name="sender">The parameter is not used.</param>
        /// <param name="e">The parameter is not used.</param>
        private void SineOrCircle_Checked(object sender, RoutedEventArgs e)
        {
            if (this.LissaSet != null)
            {
                this.LissaSet.Visibility = this.Sine.IsChecked == true ? Visibility.Visible : Visibility.Collapsed;
            }

            if (this.LissaSetCircle != null)
            {
                this.LissaSetCircle.Visibility = this.Sine.IsChecked == true ? Visibility.Collapsed : Visibility.Visible;
            }
        }
    }
}
